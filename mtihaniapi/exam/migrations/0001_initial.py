# Generated by Django 5.1.7 on 2025-07-13 10:52

import django.db.models.deletion
import exam.utils
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('learner', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassAggregatePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_count', models.IntegerField(default=0)),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('grade_scores', models.TextField(blank=True)),
                ('bloom_skill_scores', models.TextField(blank=True)),
                ('strand_analysis', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classroom', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='aggregate_exam_performance', to='learner.classroom')),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('Generating', 'Generating'), ('Failed', 'Failed'), ('Upcoming', 'Upcoming'), ('Ongoing', 'Ongoing'), ('Grading', 'Grading'), ('Complete', 'Complete'), ('Analysing', 'Analysing'), ('Archive', 'Archive')], default='Generating', max_length=25)),
                ('code', models.CharField(default=exam.utils.generate_unique_code, max_length=50, unique=True)),
                ('duration_min', models.IntegerField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_grading', models.BooleanField(default=False)),
                ('is_analysing', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generation_config', models.TextField(blank=True, null=True)),
                ('generation_error', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('Standard', 'Standard'), ('FollowUp', 'FollowUp')], default='Standard', max_length=25)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='learner.classroom')),
                ('source_exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='exam.exam')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exams', to='learner.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='ClassExamPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('student_count', models.IntegerField(default=0)),
                ('expectation_level_distribution', models.TextField(blank=True)),
                ('score_distribution', models.TextField(blank=True)),
                ('score_variance', models.TextField(blank=True)),
                ('bloom_skill_scores', models.TextField(blank=True)),
                ('general_insights', models.TextField(blank=True)),
                ('grade_scores', models.TextField(blank=True)),
                ('strand_analysis', models.TextField(blank=True)),
                ('strand_student_mastery', models.TextField(blank=True)),
                ('flagged_sub_strands', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='class_exam_performance', to='exam.exam')),
            ],
        ),
        migrations.CreateModel(
            name='ExamPerformanceCluster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cluster_label', models.CharField(max_length=10)),
                ('cluster_size', models.IntegerField(default=0)),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('score_variance', models.TextField(blank=True)),
                ('bloom_skill_scores', models.TextField(blank=True)),
                ('strand_scores', models.TextField(blank=True)),
                ('top_best_question_ids', models.TextField(blank=True)),
                ('top_worst_question_ids', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_clusters', to='exam.exam')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='performance_cluster',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='follow_up_exams', to='exam.examperformancecluster'),
        ),
        migrations.CreateModel(
            name='ExamQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('grade', models.IntegerField()),
                ('strand', models.CharField(max_length=100)),
                ('sub_strand', models.CharField(max_length=100)),
                ('bloom_skill', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('expected_answer', models.TextField()),
                ('bloom_skill_options', models.TextField(blank=True)),
                ('question_options', models.TextField(blank=True)),
                ('answer_options', models.TextField(blank=True)),
                ('tr_description', models.TextField(blank=True, null=True)),
                ('tr_expected_answer', models.TextField(blank=True, null=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exam.exam')),
            ],
        ),
        migrations.CreateModel(
            name='ExamQuestionAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_count', models.IntegerField()),
                ('grade_distribution', models.TextField(blank=True)),
                ('bloom_skill_distribution', models.TextField(blank=True)),
                ('strand_distribution', models.TextField(blank=True)),
                ('sub_strand_distribution', models.TextField(blank=True)),
                ('untested_strands', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='exam.exam')),
            ],
        ),
        migrations.CreateModel(
            name='ExamQuestionPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('score_distribution', models.TextField(blank=True)),
                ('answers_by_level', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance', to='exam.examquestion')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAggregatePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_count', models.IntegerField(default=0)),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('bloom_skill_scores', models.TextField(blank=True)),
                ('grade_scores', models.TextField(blank=True)),
                ('strand_scores', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='aggregate_performance', to='learner.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentExamSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Generating', 'Generating'), ('Failed', 'Failed'), ('Upcoming', 'Upcoming'), ('Ongoing', 'Ongoing'), ('Grading', 'Grading'), ('Complete', 'Complete'), ('Analysing', 'Analysing'), ('Archive', 'Archive')], default='Upcoming', max_length=15)),
                ('is_late_submission', models.BooleanField(default=False)),
                ('start_date_time', models.DateTimeField(null=True)),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('duration_min', models.IntegerField(blank=True, null=True)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.exam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_exam_session', to='learner.student')),
            ],
            options={
                'unique_together': {('student', 'exam')},
            },
        ),
        migrations.CreateModel(
            name='StudentExamSessionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('score', models.FloatField(blank=True, null=True)),
                ('expectation_level', models.CharField(blank=True, choices=[('Below', 'Below'), ('Approaching', 'Approaching'), ('Meeting', 'Meeting'), ('Exceeding', 'Exceeding')], max_length=100, null=True)),
                ('ai_score', models.FloatField(blank=True, null=True)),
                ('tr_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exam.examquestion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exam.studentexamsession')),
            ],
        ),
        migrations.CreateModel(
            name='StudentExamSessionPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_score', models.FloatField()),
                ('avg_expectation_level', models.CharField(blank=True, max_length=100)),
                ('class_avg_difference', models.FloatField(default=0.0)),
                ('bloom_skill_scores', models.TextField(blank=True)),
                ('grade_scores', models.TextField(blank=True)),
                ('strand_scores', models.TextField(blank=True)),
                ('questions_answered', models.IntegerField(default=0)),
                ('questions_unanswered', models.IntegerField(default=0)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('best_5_answer_ids', models.TextField(blank=True)),
                ('worst_5_answer_ids', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performances', to='exam.examperformancecluster')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_exam_session_performance', to='exam.studentexamsession')),
            ],
        ),
    ]
